<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
  "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping auto-import="false">
  <class name="com.krishagni.catissueplus.core.biospecimen.domain.LabServicesRateList" table="OS_LAB_SERVICES_RATE_LISTS"
    entity-name="com.krishagni.catissueplus.core.biospecimen.domain.LabServicesRateList">

    <id name="id" column="IDENTIFIER">
      <generator class="native">
        <param name="sequence">OS_LAB_SVCS_RATE_LISTS_SEQ</param>
      </generator>
    </id>

    <property name="name" column="NAME" not-null="true" />

    <property name="description" column="DESCRIPTION" />

    <property name="startDate" column="START_DATE" not-null="true" />

    <property name="endDate" column="END_DATE" />

    <property name="currency" column="CURRENCY" not-null="true" />

    <many-to-one name="creator" column="CREATOR_ID" not-null="true" />

    <property name="creationTime" column="CREATION_TIME" not-null="true" />

    <many-to-one name="updater" column="UPDATER_ID" />

    <property name="updateTime" column="UPDATE_TIME" />

    <property name="activityStatus" column="ACTIVITY_STATUS" not-null="true" />

    <set name="cps" table="OS_LAB_SVCS_RATE_LIST_CPS" inverse="true" cascade="all-delete-orphan" batch-size="100"
      where="exists (select 1 from catissue_collection_protocol cp where cp.identifier = cp_id and cp.activity_status != 'Disabled')">
      <key column="RATE_LIST_ID" />
      <one-to-many class="com.krishagni.catissueplus.core.biospecimen.domain.LabServiceRateListCp" />
    </set>

    <set name="serviceRates" table="OS_LAB_SERVICE_RATES" inverse="true" cascade="all-delete-orphan" batch-size="100"
      where="exists (select 1 from os_lab_services s where s.identifier = service_id and s.activity_status != 'Disabled')">
      <key column="RATE_LIST_ID" />
      <one-to-many class="com.krishagni.catissueplus.core.biospecimen.domain.LabServiceRate" />
    </set>

    <filter name="activeEntity" />

    <sql-query name="getRateListStats">
      <return-scalar column="rateListId" type="long" />
      <return-scalar column="services" type="long" />
      <return-scalar column="cps" type="long" />

      select
        rl.identifier as rateListId, count(distinct svc.identifier) as services, count(distinct cp.identifier) as cps
      from
        os_lab_services_rate_lists rl
        left join os_lab_svcs_rate_list_cps rl_cp on rl_cp.rate_list_id = rl.identifier
        left join catissue_collection_protocol cp on cp.identifier = rl_cp.cp_id and cp.activity_status != 'Disabled'
        left join os_lab_service_rates rl_svc on rl_svc.rate_list_id = rl.identifier
        left join os_lab_services svc on svc.identifier = rl_svc.service_id and svc.activity_status != 'Disabled'
      where
        rl.identifier in (:rateListIds)
      group by
        rl.identifier
    </sql-query>

    <sql-query name="getOverlappingServiceRates">
      <return-scalar column="rate_list_id" type="long" />
      <return-scalar column="rate_list_name" type="string" />
      <return-scalar column="cp_short_title" type="string" />
      <return-scalar column="service_code" type="string" />

      <![CDATA[
      select
        rl.identifier as rate_list_id, rl.name as rate_list_name, cp.short_title as cp_short_title, svc.code as service_code
      from
        os_lab_services_rate_lists rl
        inner join os_lab_svcs_rate_list_cps rl_cp on rl_cp.rate_list_id = rl.identifier
        inner join os_lab_service_rates svc_rate on svc_rate.rate_list_id = rl.identifier
        inner join os_lab_services svc on svc.identifier = svc_rate.service_id
        inner join catissue_collection_protocol cp on cp.identifier = rl_cp.cp_id
      where
        rl.identifier != :rateListId and
        rl.start_date < :endDate and
        (rl.end_date is null or rl.end_date > :startDate) and
        rl.activity_status != 'Disabled' and
        cp.identifier in (select cp_id from os_lab_svcs_rate_list_cps where rate_list_id = :rateListId) and
        cp.activity_status != 'Disabled' and
        svc.identifier in (select service_id from os_lab_service_rates where rate_list_id = :rateListId) and
        svc.activity_status != 'Disabled'
      order by
        rl.identifier, rl.name, cp.short_title, svc.code
      ]]>
    </sql-query>
  </class>
</hibernate-mapping>