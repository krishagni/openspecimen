<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping auto-import="false">
  <class name="com.krishagni.catissueplus.core.administrative.domain.Shipment" table="OS_SHIPMENTS"
    entity-name="com.krishagni.catissueplus.core.administrative.domain.Shipment">
    
    <id name="id" column="IDENTIFIER">
      <generator class="native">
        <param name="sequence">OS_SHIPMENTS_SEQ</param>
      </generator>
    </id>

    <property name="request" column="REQUEST" not-null="true" />

    <many-to-one name="requester" column="REQUESTER_ID" />

    <property name="requestDate" column="REQUEST_DATE" />

    <property name="requesterComments" column="REQUESTER_COMMENTS" />
    
    <property name="name" column="NAME"/>

    <property name="type" column="TYPE">
      <type name="org.hibernate.type.EnumType">
        <param name="enumClass">com.krishagni.catissueplus.core.administrative.domain.Shipment$Type</param>
        <param name="type">12</param>
      </type>
    </property>
    
    <property name="courierName" column="COURIER_NAME"/>
    
    <property name="trackingNumber" column="TRACKING_NUMBER"/>
    
    <property name="trackingUrl" column="TRACKING_URL"/>
    
    <many-to-one name="sendingSite" column="SENDING_SITE_ID"/>
    
    <many-to-one name="receivingSite" column="RECEIVING_SITE_ID"/>
    
    <property name="shippedDate" column="SHIPPED_DATE"/>
      
    <many-to-one name="sender" column="SENDER_ID"/>
    
    <property name="senderComments" column="SENDER_COMMENTS"/>
    
    <property name="receivedDate" column="RECEIVED_DATE"/>
    
    <many-to-one name="receiver" column="RECEIVER_ID"/>
    
    <property name="receiverComments" column="RECEIVER_COMMENTS"/>
    
    <property name="status" column="STATUS" not-null="true">
      <type name="org.hibernate.type.EnumType">
        <param name="enumClass">com.krishagni.catissueplus.core.administrative.domain.Shipment$Status</param>
        <param name="type">12</param>
      </type>
    </property>

    <many-to-one name="requestStatus" column="REQUEST_STATUS" fetch="join" />
    
    <property name="activityStatus" column="ACTIVITY_STATUS"/>
    
    <set name="shipmentSpecimens" cascade="all-delete-orphan" inverse="true">
      <key column="SHIPMENT_ID" />
      <one-to-many class="com.krishagni.catissueplus.core.administrative.domain.ShipmentSpecimen"/>
    </set>

    <set name="shipmentContainers" cascade="all-delete-orphan" inverse="true">
      <key column="SHIPMENT_ID"/>
      <one-to-many class="com.krishagni.catissueplus.core.administrative.domain.ShipmentContainer"/>
    </set>
    
    <set name="notifyUsers" table="OS_SHIPMENT_NOTIFY_USERS">
      <key column="SHIPMENT_ID"/>
      <many-to-many class="com.krishagni.catissueplus.core.administrative.domain.User" column="USER_ID"/>
    </set>

    <filter name="activeEntity"/>
    
    <query name="getShipmentByName">
      from
        com.krishagni.catissueplus.core.administrative.domain.Shipment
      where
        name = :name
    </query>
    
    <query name="getShippedSpecimensByIds">
      select
        spec
      from
        com.krishagni.catissueplus.core.administrative.domain.Shipment s
        join s.shipmentSpecimens item
        join item.specimen spec
      where
        s.activityStatus != 'Disabled' and
        s.status = 'SHIPPED' and
        spec.id in (:ids)
    </query>

    <sql-query name="getSpecimensCount">
      <return-scalar column="shipmentId" type="long"/>
      <return-scalar column="spmnsCount" type="integer"/>

      select
        s.identifier as shipmentId, count(ss.identifier) as spmnsCount
      from
        os_shipments s
        inner join os_shipment_specimens ss on ss.shipment_id = s.identifier
      where
        (s.type = 'SPECIMEN' or s.status != 'PENDING') and
        s.identifier in (:shipmentIds)
      group by
        s.identifier

      union all

      select
        s.identifier as shipmentId, count(sp.identifier) as spmnsCount
      from
        os_shipments s
        inner join os_shipment_containers sc on sc.shipment_id = s.identifier
        inner join os_containers_hierarchy h on h.ancestor_id = sc.container_id
        inner join os_container_positions sp on sp.storage_container_id = h.descendent_id
      where
        (s.type = 'CONTAINER' and s.status = 'PENDING') and
        sp.occupying_specimen_id is not null and
        s.identifier in (:shipmentIds)
      group by
        s.identifier
    </sql-query>

    <sql-query name="getSpecimensCountByContainer">
      <return-scalar column="containerId" type="long"/>
      <return-scalar column="spmnsCount" type="integer"/>

      select
        sc.container_id as containerId, count(ss.identifier) as spmnsCount
      from
        os_shipment_containers sc
        inner join os_shipment_specimens ss on ss.shipment_container_id = sc.identifier
      where
        sc.container_id in (:containerIds) and
        sc.shipment_id = :shipmentId
      group by
        sc.container_id
    </sql-query>

    <sql-query name="deleteSpecimenShipmentEvents">
      delete from
        catissue_form_record_entry
      where
        identifier in (
          select
            t.identifier
          from (
            select
              re.identifier as identifier
            from
              catissue_form_record_entry re
              inner join catissue_form_context fc on fc.identifier = re.form_ctxt_id
              inner join dyextn_containers f on f.identifier = fc.container_id
              inner join os_shipment_specimens ss on ss.identifier = re.record_id and ss.specimen_id = re.object_id
              inner join os_shipments s on s.identifier = ss.shipment_id
            where
              s.identifier = :shipmentId and
              f.name in ('SpecimenShipmentShippedEvent', 'SpecimenShipmentReceivedEvent')
          ) t
        )
    </sql-query>
  </class>
</hibernate-mapping>
